" This must be first, because it changes other options as side effect
set nocompatible
"function to create swap and backup folders
" make sure this is correct!
function! EnsureDirExists (dir)
    if !isdirectory(a:dir)
        "check if builtin mkdir function exists
        if exists("*mkdir")
            "flag if error happened 
            " let l:haserror = 0
            try
                call mkdir(a:dir,'p')
            catch /.*/    
                echo 'Error making' . a:dir 
                " let l:haserror = 1
            endtry 
            " if no error print this out 
            " if (l:haserror == 0)
            "    echo "Created directory: " . a:dir 
            " endif
        else 
            echo "Please create directory: " . a:dir
        endif
    endif
endfunction



call EnsureDirExists($HOME.'/.vim_swaps')
call EnsureDirExists($HOME.'/.vim_backups')


call plug#begin('~/.vim/plugged')

" theme
Plug 'joshdick/onedark.vim'
" Plug 'prettier/vim-prettier', { 'do': 'npm install' }
" filetree
Plug 'preservim/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" devicons
Plug 'ryanoasis/vim-devicons'
" statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" gutter for git icons
Plug 'airblade/vim-gitgutter'
" commets things out
Plug 'tpope/vim-commentary'
" autoclose parathenses and stuff 
Plug 'cohama/lexima.vim'
" honestly not going to use this
Plug 'tpope/vim-fugitive'
" language pack
Plug 'sheerun/vim-polyglot'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

call plug#end()

" needed to get terminal gui colors working correctly
set termguicolors

" set dirs to stor swap and back up dile
set backupdir=$HOME/.vim_backups//
set directory=$HOME/.vim_swaps//

" make all json files json with comment files
augroup JsonToJsonc
    autocmd! FileType json set filetype=jsonc
augroup END

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"


" Under the command mode, the bottom-layer operation instructions will be completed automatically by pressing the Tab key. 
"The first time you press Tab, a list of all matched operation instructions will be displayed; and the second time you press Tab, each instruction will be selected in turn.
set wildmenu

" Enable use of the mouse for all modes
set mouse=a

" Allow hidden buffers (essentially allow editing multiple bufferes without saving immediately)
set hidden

" Show partial commands in the last line of the screen
set showcmd

" set terminal title
set title

set pumheight=10

set signcolumn=yes

set splitright
set splitbelow

set scrolloff=8
set sidescrolloff=8

"uses system clipboard
set clipboard=unnamedplus

" show current mode (is this needed)
" set showmode
" dont show mode as it is already in the status line
set noshowmode


set encoding=utf-8

" this is for git gutter
set updatetime=300

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

"show matching braces/brackets
set showmatch

" Indentation settings for using 4 spaces instead of tabs.
set expandtab
set shiftwidth=4
set softtabstop=4

" Enable syntax highlighting
syntax enable

" Always display the status line, even if only one window is displayed
set laststatus=2

set background=dark

" let g:lightline = {
"       \ 'colorscheme': 'onedark',
"       \ }

colorscheme onedark

" Always show cursor position
set ruler

" Highlight the line currently under cursor 
set cursorline

" show line numbers
set number

set relativenumber

" Disable annoying sound on errors
set noerrorbells
set novisualbell
" Nerd font for MavVim (good to render devicons properly)

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype plugin indent on

" No backup (use Git instead)
set nobackup

" Dont wrap file lines in editor
set nowrap

" highlight search terms
set hlsearch

" show search matches as you type
set incsearch

let g:airline_theme='deus'
let g:airline#extensions#tabline#enabled = 1

" Keybindings
" will only delay if ther is an impap <space> mapping
nnoremap <Space> <Nop>
let mapleader = " "
let maplocalleader = " "

" adds trailing ; to the end of a line;
imap ;; <Esc>A;<Esc>
" usefull for python
imap :: <Esc>A:<Esc>

inoremap jk <Esc>
inoremap kj <Esc>
inoremap jj <Esc>

nnoremap <C-j> <C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <silent> L :bnext<cr>
nnoremap <silent> H :bprevious<cr>

nnoremap <silent> <leader>tt :NERDTreeToggle<CR>

"remove search hilighting (after search)
nnoremap <silent> <leader>h :noh<cr>

nnoremap <silent> <leader>b :buffers<cr>

" only writes to the file if it has been modified
nnoremap <leader>s :update<cr>

" vim can't realy reacognize cntrl + arrow leys so used arrow keys
nnoremap <S-Up> :resize -2<cr>
nnoremap <S-Down> :resize +2<cr>
nnoremap <S-Left> :vertical resize -2<cr>
nnoremap <S-Right> :vertical resize +2<cr>
" useful for closing splits
nnoremap <leader>q :q!<cr>

